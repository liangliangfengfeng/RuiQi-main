重点信息如下
项目采用的框架是 react + vite + tailwindcss + typescript
路由使用的是 "react-router": "^7.1.3"
包管理器使用的是 pnpm
ui 使用的是 shadcn
主要分为左右布局，左边是sidebar 负责主导航，右边是内容区。
内容区顶部为 breadcrumb，breadcrumb负责子导航，sidebar 不同的导航点进来会有不同的 breadcrumb 路径。
项目 icon 使用 lucide-react

---
项目要求
1. 结构完整，功能完整，代码规范，可维护性强
2. 目录组装，文件命名符合规范，关键代码需要有友好注释
3. 使用 vite 进行开发，使用 vite 进行打包
4. 使用 tailwindcss 进行样式开发
5. 使用 shadcn 进行 ui 开发
6. 使用 react-router "react-router": "^7.1.3", 进行路由开发
7. 使用 tanstack query @tanstack/react-query@5.69.0 进行数据请求
8. 使用 tanstack table 进行表格开发
9. 使用 zustand 进行状态管理
10. 使用 react-hook-form 进行表单开发
11. 使用 zod 进行数据验证
12. 使用 react-i18next 进行国际化
13. 支持中英文切换，默认使用中文
14. 使用 i18next-http-backend 加载翻译文件
15. 使用 i18next-browser-languagedetector 检测用户语言
16. 项目 icon 使用 lucide-react
---

项目主要目录结构介绍
静态资源
public
public/locales 是国际化文件夹，负责项目的国际化配置
public/locales/en/translation.json 是英文翻译文件
public/locales/zh/translation.json 是中文翻译文件
src/assets 是项目静态资源文件夹，负责项目的静态资源管理

入口与配置
index.html 单应用挂载点，入口文件
src/main.tsx 是项目入口文件，负责项目的初始化
src/App.tsx 是项目主组件，负责项目的根组件
src/i18n.ts 是国际化 i18n 配置文件，负责项目的国际化配置
eslint.config.js 是 eslint 的配置文件，负责项目的 eslint 配置
package.json 包文件
vite.config.ts 是 vite 的配置文件，负责项目的 vite 配置
components.json 是 shadcn 的配置文件，负责项目的 shadcn 配置

样式
src/index.css 是项目样式文件，负责项目的样式
tailwind.config.ts 是 tailwindcss 的配置文件

API 请求封装
src/api/index.ts: 使用 axios 创建了基础 API 客户端，包含请求拦截器和响应拦截器
src/api/auth.ts: 实现了认证相关的 API 服务，包括登录、获取当前用户信息和密码重置
src/api/certificate.ts: 提供证书相关API服务，包括获取证书列表、创建证书、获取单个证书、更新和删除证书
src/api/site.ts: 提供站点相关API服务，包括获取站点列表、创建站点、获取单个站点、更新和删除站点
src/api/services.ts: 统一导出 API 服务


项目内容
路由配置
src/routes 下是路由配置文件，负责路由的配置和面包屑的配置，
src/routes/config.tsx 是路由配置文件，负责路由的配置和面包屑的配置
src/routes/constants.ts 定义路由路径常量，例如 ROUTES

布局
src/components/layout 下是布局文件，负责项目的布局管理
src/components/layout/root-layout.tsx 是根布局文件，负责项目的根布局管理
src/components/layout/sidebar.tsx 是侧边栏文件，负责项目的侧边栏管理
src/components/layout/breadcrumb.tsx 是面包屑文件，负责项目的面包屑管理

路由端点 页面
src/pages 下是页面文件，负责项目的页面管理
src/pages/auth 下是认证页面文件，负责项目的认证页面管理
src/pages/setting/pages/site/index.tsx: 站点管理页面主组件
src/pages/setting/pages/certificate/index.tsx: 证书管理页面主组件
src/pages/logs 下是日志页面文件，负责项目的日志页面管理
src/pages/logs/components 下是日志页面组件文件，负责项目的日志页面组件管理
src/pages/logs/components/logs-attack.tsx 是日志攻击页面组件文件，负责项目的日志攻击页面组件管理
src/pages/logs/components/logs-protect.tsx 是日志保护页面组件文件，负责项目的日志保护页面组件管理

src/pages/monitor 下是监控页面文件，负责项目的监控页面管理
src/pages/rule 下是规则页面文件，负责项目的规则页面管理
src/pages/setting 下是设置页面文件，负责项目的设置页面管理

src/lib 公共库
src/lib 下是项目公共库文件，负责项目的公共库管理

src/hooks hook
src/hooks 下是项目 hooks 文件，负责项目的 hooks 管理

src/types 类型
src/types 下是项目 types 文件，负责项目的 types 管理
src/types/i18next.d.ts 是 i18next 的类型文件，它扩展了 i18next 模块的类型定义，目的是提供更好的类型检查和代码补全功能。
src/types/auth.ts: 定义了认证相关的类型，包括请求类型、响应类型和状态类型
src/types/certificate.ts: 定义证书相关类型，包括证书数据结构、请求和响应类型
src/types/site.ts: 定义站点相关类型，包括站点数据结构、请求和响应类型

src/components 项目组件
src/components/common 下是项目公共组件文件，负责项目的公共组件管理
src/components/layout 下是项目布局组件文件，负责项目的布局组件管理
src/components/table 下是项目表格组件文件，负责项目的表格组件管理，将tanstack table 进行封装
src/components/ui shadcn ui基础组件，由 shadcn 命令行生成

src/store 状态管理
src/store 下是项目状态管理文件，负责项目的状态管理
src/store/auth.ts 是认证状态管理文件，负责项目的认证状态管理

src/validation 表单验证
src/validation 下是项目表单验证文件，负责项目的表单验证管理
src/validation/auth.ts 是认证表单验证文件，负责项目的认证表单验证管理
src/validation/site.ts: 使用zod定义站点表单验证规则
src/validation/certificate.ts: 使用zod定义证书表单验证规则

src/feature 功能模块 一些页面的功能，组件可以单独抽离出来
src/feature 下是项目功能模块文件，负责项目的功能模块管理
src/feature/auth 下是认证功能模块文件，负责项目的认证功能模块管理
src/feature/auth/hook 下是认证功能模块的 tanstack query 数据管理封装 
src/feature/auth/components 下是认证功能模块组件文件，负责项目的认证功能模块组件管理
src/feature/auth/components/LoginForm.tsx 是登录表单组件文件，负责项目的登录表单组件管理
src/feature/auth/components/PasswordResetForm.tsx 是密码重置表单组件文件，负责项目的密码重置表单组件管理
src/feature/auth/components/ProtectedRoute.tsx 是路由保护组件文件，负责项目的路由保护组件管理


src/utils 工具函数
src/utils 下是项目 utils 文件，负责项目的 utils 管理


全局状态管理:
- 认证状态: 包括用户信息、token、是否已认证等
- 状态持久化: 使用 Zustand persist 中间件实现

流量控制功能模块:
- src/types/blocked-ip.ts: 定义封禁IP相关类型，包括封禁记录、请求参数、统计数据等
- src/api/blocked-ip.ts: 提供封禁IP相关API服务，包括获取封禁IP列表、统计信息和清理过期记录
- src/validation/flow-control.ts: 使用zod定义流量控制配置的表单验证规则
- src/feature/flow-control/: 流量控制功能模块
  - hooks/useBlockedIP.ts: 封禁IP相关的tanstack query数据管理封装
  - hooks/useFlowControl.ts: 流量控制配置相关的数据管理封装
  - components/BlockedIPTable.tsx: 封禁IP列表表格组件，支持搜索、过滤、排序和分页
  - components/FlowControlDialog.tsx: 流量控制配置对话框组件
  - components/FlowControlForm.tsx: 流量控制配置表单组件，包含访问、攻击、错误频率限制配置
- src/pages/rule/pages/cc/page.tsx: 流量控制管理页面，展示封禁IP表格和配置入口
- 国际化支持: 在translation.json中添加了flowControl相关的中英文翻译
- 更新了config类型定义，添加了FlowControlConfig相关接口

# Security Dashboard 大屏开发上下文

## 项目概述
完成了 security-dashboard 大屏开发，这是一个基于 React + TypeScript 的 WAF 安全防护监控大屏系统。

## 技术栈
- React 18 + TypeScript
- shadcn/ui 组件库
- TanStack Query 数据请求
- react-hook-form + zod 表单验证
- echarts 图表库
- react-i18next 国际化
- Tailwind CSS 样式

## 功能特性
1. **实时数据监控** - 5秒轮询更新
2. **3D地球可视化** - 攻击轨迹展示
3. **统计数据展示** - 24小时拦截数、攻击IP数、访问次数
4. **实时攻击列表** - 显示最新的Web攻击事件
5. **QPS图表** - 实时请求量监控
6. **国际化支持** - 中英文切换
7. **全屏模式** - 支持全屏切换

## 文件结构
```
src/feature/security-dashboard/
├── hooks/
│   ├── useSecurityDashboard.ts    # 数据管理Hook
│   └── index.ts
├── component/
│   ├── SecurityDashboardLayout.tsx # 主布局组件
│   ├── StatCard.tsx               # 统计卡片组件
│   ├── AttackIPList.tsx           # 攻击IP列表组件
│   ├── RealtimeAttackList.tsx     # 实时攻击列表组件
│   ├── DashboardQPSChart.tsx      # QPS图表组件
│   └── index.ts
└── index.ts
```

## 核心组件说明

### 1. useSecurityDashboard Hook
- 管理统计数据和攻击事件数据
- 实现5秒轮询机制
- 过滤有地理位置信息的攻击事件
- 提供处理后的数据给各个组件使用

### 2. SecurityDashboardLayout 主布局
- 实现上下左右布局设计
- 顶部：标题栏 + 时间显示 + 全屏切换
- 左侧：3个统计卡片 + 攻击IP列表
- 右侧：实时攻击列表
- 底部：QPS图表
- 背景：3D地球可视化

### 3. StatCard 统计卡片
- 显示统计数据（拦截数、攻击IP数、访问次数）
- 支持数字格式化（K、M单位）
- 图标 + 数值的卡片设计
- 半透明背景 + 毛玻璃效果

### 4. AttackIPList 攻击IP列表
- 显示24小时内的攻击IP
- 包含IP地址、地理位置、攻击次数
- 支持国际化地理位置显示
- 滚动列表设计

### 5. RealtimeAttackList 实时攻击列表
- 显示实时Web攻击事件
- 状态指示器（进行中/已结束）
- 包含IP、地理位置、时间、域名信息
- 支持滚动查看更多攻击事件

### 6. DashboardQPSChart QPS图表
- 使用echarts实现实时QPS监控
- 120个数据点，适合大屏展示
- 紫色主题配色
- 渐变柱状图设计

## 样式设计
- **主色调**: #a071da (紫色)
- **背景**: 深色渐变 (from-[#0d0c27] via-[#1a1336] to-[#2d1b54])
- **卡片**: 半透明白色背景 (bg-white/90) + 毛玻璃效果 (backdrop-blur-sm)
- **边框**: 半透明白色边框 (border-white/20)
- **阴影**: 柔和阴影效果 (shadow-lg)

## 数据源
- **统计数据**: useOverviewStats('24h') - 24小时概览统计
- **攻击事件**: useAttackEvents - 攻击事件列表
- **QPS数据**: useRealtimeQPS(120) - 实时QPS数据

## 国际化
- 支持中英文切换
- 地理位置信息根据语言显示对应名称
- 使用 react-i18next 管理翻译

## 响应式设计
- 固定布局适配大屏显示
- 组件内部支持滚动
- 全屏模式支持

## 性能优化
- 使用 useMemo 优化数据处理
- 轮询机制避免内存泄漏
- 图表组件优化渲染性能

## 部署说明
- 页面路径: /monitor/security-dashboard
- 组件已集成到现有路由系统
- 支持热重载开发

## 后续优化建议
1. 添加更多图表类型（饼图、折线图等）
2. 增加攻击类型分类统计
3. 添加地理位置热力图
4. 支持时间范围选择
5. 添加数据导出功能
6. 优化移动端适配

## 开发注意事项
- 遵循项目现有代码风格
- 使用TypeScript严格类型检查
- 组件复用性设计
- 错误边界处理
- 加载状态管理



