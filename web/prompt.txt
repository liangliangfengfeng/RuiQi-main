使用中文回答
 @src @api 
@openapi.yaml  是后端 api 定义文件

版本信息
react-router: "^7.1.3"
tanstack query: "@tanstack/react-query@5.69.0"

完成日志页面和攻击事件页面，要求如下:
1. 使用 shadcn 的组件库
2. 使用 tanstack query 进行数据请求
3. 使用 react-hook-form 和 zod 进行表单验证
4. 页面简洁大方，好看
5. 按照项目原本的目录结构进行组织
7. 代码不出错，可以运行

详细要求如下:
1. 对齐后端 api，参考 @services.ts @certificate.ts 
2. 实现 攻击事件，防护日志页面，其中 攻击事件对应  /api/v1/waf/logs/events  防护日志对应 /api/v1/waf/logs，table 使用 @tanstack/react-table, 要求有翻页，翻页参考 @pagination.tsx  table 参考 @data-table.tsx 
3. 实现 攻击事件，防护日志的查询框，要求功能实现相应 api 的所有查询参数
4. 攻击事件页面要求如下，展示的字段为 clientIpAddress count domain firstAttackTime lastAttackTime isOngoing durationInMinutes，当 isOngoing 为 true 时，显示攻击的持续时间 durationInMinutes, 同时点击 count 会跳转至防护日志页面，传递 domain clientIpAddress 查询条件到防护日志页面，查询关系是 domain 且 clientIpAddress 的组合
5. 防护日志页面要求如下，展示的字段为 Target(其为 WAFLog.Domain + WAFLog.URI) ClientIPAddress TIME（ 其为 CreatedAt），防护日志可以接受攻击事件页面跳转过来时，传递 domain clientIpAddress 查询条件到防护日志页面，查询关系是 domain 且 clientIpAddress 的组合
6. 防护日志页面有一个详情按钮，点击会打开一个 dialog，dialog 要求如下：
    diaolog 分三部分，第一部分展示 字段 Target(其为 WAFLog.Domain + WAFLog.URI) ClientIPAddress Payload Message RuleID CreatedAt 
    第二部部分为一个 tab 分别为 请求报文和响应报文 和 日志，渲染格式为HTML代码格式 值为 Request Response，同时第二部分还有一个 两个操作 按钮 一个是 复制  curl，即复制测试 payload，一个是 选择渲染的编码格式
    第三部分为渲染 请求报文和响应报文 和 日志 结果，分别对应第二部分的 tab
    展示详情的 dialog 需要组件化，方便其他地方调用。
大致样式参考文件
dialog 图片样式仅作参考，具体实现请按照上述要求，并且使用 符合项目ui，shadcn ui 来实现，要求好看，简约。
 7. 攻击事件 防护日志的查询与获取 需要进行数据封装，放在 feature/log/hook 下，参考  useCertificate.ts  
8. 对已有的 攻击事件，防护日志代码 @attack-detail-dialog.tsx @logs-attack.tsx @logs-protect.tsx  按照上面要求进行重写，页面好看，大方，符合 shadcn ui 风格，代码结构符合项目要求结构，例如 feature/log/components feature/log/hook 放攻击事件，防护日志的 组件化 和数据管理 hooks  types 放类型，api 放接口，validation 放数据验证，pages/logs/pages/event/page.tsx pages/logs/pages/log/page.tsx  放攻击事件，防护日志页面
9. 组件 icon 使用 lucide-react
10. 代码工整，有完整的类型，简洁，可维护性高

非常重要的一点
@context.txt  是项目的上下文信息，在设计的时候可以参考这个文件获取目前项目已有的信息，在完成本次变更后，所做的变更需要同步到 context.txt 上下文文件中，方便下次提问

项目核心结构如下
src/
├── api/                   # API相关文件
│   ├── index.ts           # 基础配置和拦截器
│   ├── auth.ts            # 认证相关API
│   ├── waf.ts             # WAF日志相关API
│   ├── site.ts           # 站点管理相关API
│   └── services.ts        # 统一导出所有API服务
├── feature/              # 功能模块（包含特定功能的组件和hooks）
│   ├── auth/              # 认证相关功能
│   │   ├── components/    # 认证相关组件
│   │   └── hooks.ts       # 认证相关自定义hook，例如 tanstack query 数据管理的封装
│   └── ... 
├── store/                 # 全局状态管理
│   ├── auth.ts
│   ├── logs.ts
│   └── index.ts
├── validation/           # 表单验证逻辑
│   ├── auth.ts
│   └── ...
├── components/            # 通用组件
│   ├── table/             # 表格组件
│   ├── layout/            # 布局组件
│   │   ├── breadcrumb.tsx # 面包屑组件
│   │   ├── sidebar.tsx    # 侧边栏组件
│   │   └── root-layout.tsx # 根布局组件
│   ├── ui/                # 通用UI组件
├── router/                # 路由配置
│   ├── config.ts          # 路由配置，包括面包屑的 nav 生成等
│   └── ...
├── utils/                 # 工具函数
│   ├── env.ts
│   └── ...
├── hooks/                 # 自定义hooks
├── lib/                   # 工具库
│   ├── utils.ts
│   └── ...
├── types/                 # 类型定义
│   ├── auth.ts
│   └── ...
├── pages/                 # 页面组件
│   ├── auth/              # 认证相关页面
│   │   ├── login.tsx      # 登录页面
│   │   ├── reset-password.tsx # 重置密码页面
│   └── ...
